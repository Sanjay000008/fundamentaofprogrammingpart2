Fundamentals Of programming another  type is here.

4. Object-oriented programming
Object-oriented programming is based on the concept of objects and classes where an object may contain data in the form of attributes and methods. Classes are user-defined blueprints or prototypes from which you can create objects. For example, consider a class that represents a person. The person class contains attributes such as name, date of birth, blood group, nationality, gender, and height. You can then use this class as a blueprint to create objects where each object would represent a different person with a unique set of attributes. Some important concepts in object-oriented programming include:

Encapsulation: Encapsulation is the binding of data elements, such as variables and properties and member methods, into one unit.
Abstraction: This enables you to hide specific details about a class and provide only essential information to the outside world. For example, the working mechanism of a web server is unknown to the end-user, who clicks on a button and receives the required information.
Inheritance: This is the ability to create a new class from an existing class. For example, you can create a child class which inherits all the properties of its parent class and has its own set of additional properties and methods.
Polymorphism: Using polymorphism, you can access objects of different types using the same interface where each object provides its own implementation.



5. Debugging
Debugging is the process of removing errors from computer programs that allow software development and engineering teams to produce functioning software. Through debugging, they can examine individual sections of code to ensure that the program works as intended. Below is a list of possible programming errors:

Syntax error
A syntax error occurs when there is an erroneous sequence of characters or tokens in the code that doesn't follow the syntax of a programming language. These may include indentation errors, missing brackets, extra commas, and misspelt commands. Programming tools detect these errors at compile time and display the line number and type of error, along with the error description. You can review the error description and modify the code so that it follows the right syntax.

Logical errors
A logical error occurs when there is a flaw in the algorithm or logic of the code, which either halts the execution of a program or produces a wrong output. You encounter logical errors only during run-time since there are no errors in the code's syntax. For example, wrongly initializing a variable can cause a logical error in the code.

Latent errors
Latent errors, also known as hidden errors, arise when you use a specific set of data as input to the program. When you forget to account for an outlier or edge case, a program can fail or produce incorrect results. For example, you may have created a program that accepts users' dates of birth but does not account for characters or negative numbers an end-user may enter incorrectly. Here, the program may either halt its execution or crash.

Related: Understanding the Difference Between Coding vs. Programming



6. Programming tools
Integrated development environments (IDEs) are applications that allow programmers to write, compile, and execute code. IDEs provide a central interface that contains tools which facilitate code completion, code compilation, debugging, and syntax highlighting. Some IDEs also allow you to add plugins, enabling you to navigate the framework codebase and add your custom classes and features. You can use IDEs for:

Writing code: You can use IDEs to write and edit program code to complete a set of tasks.
Compiling code: IDEs compile code by translating human-readable code to a format that is understandable by the computer.
Debugging code: IDEs help you detect errors in a code and make fixes.
Monitoring resources: You can monitor various parameters such as disk space, resource consumption, memory usage, free space on the disk, and cache memory, which help you optimize your code to run faster and more efficiently.
Building automation tools: Some IDEs also provide automated tools for development tasks.
Some examples of IDEs include PyCharm, Android Studio, Coda, and Eclipse.